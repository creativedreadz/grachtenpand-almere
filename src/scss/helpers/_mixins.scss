// ---------------------------------------------
// Media Queries
// ---------------------------------------------

@mixin respond-to-max($value) {
	@media(max-width: map-get($breakpoints, $value)) {
		@content;
	}
}

@mixin respond-to-min($value) {
	@media(min-width: map-get($breakpoints, $value)) {
		@content;
	}
}

// ---------------------------------------------
// CSS3 Transition 
// Using a Sass 'vararg' the three dots make sure 
// even comma separated values (like chaining CSS transitions) 
// are passed along as one string
//
// Usage: @include transition(background 0.5s ease-out, color 0.3s ease-in);
// ---------------------------------------------

@mixin transition($val...) {
	@include prefix-selector(transition, $val);
}

// ---------------------------------------------
// @font-face
// var $dir-font is listed in _config.scss
// Don't forget to add the proper mime-types 
// for these font files in the web server config
//
// Usage, @root: @include font-face('Proxima Nova', 'proxima-nova-std-0384586', 400, 'normal');
// ---------------------------------------------

@mixin font-face($font-name, $font-file, $font-weight: 400, $font-style: 'normal') {
	@font-face {
		font-family: '#{$font-name}';
		src: url('#{$dir-font}/#{$font-file}.eot');
		src: url('#{$dir-font}/#{$font-file}.eot?#iefix') format('embedded-opentype'),
			 url('#{$dir-font}/#{$font-file}.woff') format('woff'),
			 url('#{$dir-font}/#{$font-file}.ttf') format('truetype'),
			 url('#{$dir-font}/#{$font-file}.svg##{$font-file}') format('svg');
		font-weight: $font-weight;
		font-style: $font-style;
	}
}

// ---------------------------------------------
// Helper mixin
// Vendor prefixes
// var $vendor-prefixes is listed in _config.scss
//
// Usage: @include prefix-selector(border-radius, 5px);
// ---------------------------------------------

@mixin prefix-selector($property, $value) { 
	// Check if CSS3 vendor prefixes are needed (see _config.scss)
	@if $experimental-support-vendor-prefixes {		
		@each $prefix in $vendor-prefixes {
			#{$prefix}#{$property}: #{$value};
		}
	}

	// Standard W3C CSS3 variant
	#{$property}: $value;
}

@mixin prefix-value($property, $value) {
	// Check if CSS3 vendor prefixes are needed (see _config.scss)
	@if $experimental-support-vendor-prefixes {	
		@each $prefix in $vendor-prefixes {
			#{$property}: #{$prefix}#{$value};
		}
	}

	// Standard W3C CSS3 variant
	#{$property}: $value;
}

// ---------------------------------------------
// Box-shadow
// Alas, we can't use the prefix-selector mixin here
//
// Usage: @include box-shadow(0, 10px, 5px, green);
// Usage: @include box-shadow(0, 10px, 5px, #888, 0.4, inset);
// ---------------------------------------------

@mixin box-shadow($x: 0, $y: 5px, $spread: 5px, $color: #000000, $alpha: 0.5, $inset:"") {
	// Check if CSS3 vendor prefixes are needed (see _config.scss)
	@if $experimental-support-vendor-prefixes {
		-webkit-box-shadow: #{$inset} $x $y $spread transparentize($color, 1 - $alpha);
		   -moz-box-shadow: #{$inset} $x $y $spread transparentize($color, 1 - $alpha);
			-ms-box-shadow: #{$inset} $x $y $spread transparentize($color, 1 - $alpha);
			 -o-box-shadow: #{$inset} $x $y $spread transparentize($color, 1 - $alpha);
	}

	// Normal W3C CSS3 variant	
	box-shadow: #{$inset} $x $y $spread transparentize($color, 1 - $alpha);
}

// ---------------------------------------------
// Rotation
//
// Usage: @include rotate(23);
// Usage: @include rotate(-49);
// ---------------------------------------------

@mixin rotate($deg: 0) {
	@include prefix-selector(transform, rotate(#{$deg}deg));
}

// ---------------------------------------------
// Transform
//
// Usage: @include transform(translateX, -50%);
// ---------------------------------------------

@mixin transform($val) {
	@include prefix-selector(transform, $val);
}